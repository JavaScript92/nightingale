{"version":3,"file":"index.js","sources":["../../../node_modules/lit-html/lit-html.js","../../../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * TypeScript has a problem with precompiling templates literals\n * https://github.com/Microsoft/TypeScript/issues/17956\n *\n * TODO(justinfagnani): Run tests compiled to ES5 with both Babel and\n * TypeScript to verify correctness.\n */\nconst envCachesTemplates = ((t) => t() === t())(() => ((s) => s) ``);\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nconst templates = new Map();\nconst svgTemplates = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => litTag(strings, values, templates, false);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => litTag(strings, values, svgTemplates, true);\nfunction litTag(strings, values, templates, isSvg) {\n    const key = envCachesTemplates ?\n        strings :\n        strings.join('{{--uniqueness-workaround--}}');\n    let template = templates.get(key);\n    if (template === undefined) {\n        template = new Template(strings, isSvg);\n        templates.set(key, template);\n    }\n    return new TemplateResult(template, values);\n}\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(template, values) {\n        this.template = template;\n        this.values = values;\n    }\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n */\nexport function render(result, container, partCallback = defaultPartCallback) {\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === result.template &&\n        instance._partCallback === partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance = new TemplateInstance(result.template, partCallback);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    let child;\n    while ((child = container.lastChild)) {\n        container.removeChild(child);\n    }\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid\n * https://github.com/PolymerLabs/lit-html/issues/62\n */\nconst attributeMarker = `{{lit-${Math.random()}}}`;\n/**\n * Regex to scan the string preceding an expression to see if we're in a text\n * context, and not an attribute context.\n *\n * This works by seeing if we have a `>` not followed by a `<`. If there is a\n * `<` closer to the end of the strings, then we're inside a tag.\n */\nconst textRegex = />[^<]*$/;\nconst hasTagsRegex = /[^<]*/;\nconst textMarkerContent = '_-lit-html-_';\nconst textMarker = `<!--${textMarkerContent}-->`;\nconst attrOrTextRegex = new RegExp(`${attributeMarker}|${textMarker}`);\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport class Template {\n    constructor(strings, svg = false) {\n        this.parts = [];\n        this.svg = svg;\n        this.element = document.createElement('template');\n        this.element.innerHTML = this._getHtml(strings, svg);\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(this.element.content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                for (let i = 0; i < attributes.length; i++) {\n                    const attribute = attributes.item(i);\n                    const attributeStrings = attribute.value.split(attrOrTextRegex);\n                    if (attributeStrings.length > 1) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute attribute\n                        const attributeString = strings[partIndex];\n                        // Trim the trailing literal value if this is an interpolation\n                        const rawNameString = attributeString.substring(0, attributeString.length - attributeStrings[0].length);\n                        // Find the attribute name\n                        const rawName = rawNameString.match(/((?:\\w|[.\\-_$])+)=[\"']?$/)[1];\n                        this.parts.push(new TemplatePart('attribute', index, attribute.name, rawName, attributeStrings));\n                        node.removeAttribute(attribute.name);\n                        partIndex += attributeStrings.length - 1;\n                        i--;\n                    }\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                const strings = nodeValue.split(attributeMarker);\n                if (strings.length > 1) {\n                    const parent = node.parentNode;\n                    const lastIndex = strings.length - 1;\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                    // We keep this current node, but reset its content to the last\n                    // literal part. We insert new literal nodes before this so that the\n                    // tree walker keeps its position correctly.\n                    node.textContent = strings[lastIndex];\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        parent.insertBefore(document.createTextNode(strings[i]), node);\n                        this.parts.push(new TemplatePart('node', index++));\n                    }\n                }\n                else {\n                    // Strip whitespace-only nodes, only between elements, or at the\n                    // beginning or end of elements.\n                    const previousSibling = node.previousSibling;\n                    const nextSibling = node.nextSibling;\n                    if ((previousSibling === null ||\n                        previousSibling.nodeType === 1 /* Node.ELEMENT_NODE */) &&\n                        (nextSibling === null ||\n                            nextSibling.nodeType === 1 /* Node.ELEMENT_NODE */) &&\n                        nodeValue.trim() === '') {\n                        nodesToRemove.push(node);\n                        currentNode = previousNode;\n                        index--;\n                    }\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === textMarkerContent) {\n                const parent = node.parentNode;\n                // If we don't have a previous node add a marker node.\n                // If the previousSibling is removed, because it's another part\n                // placholder, or empty text, add a marker node.\n                if (node.previousSibling === null ||\n                    node.previousSibling !== previousNode) {\n                    parent.insertBefore(new Text(), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a next node add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(new Text(), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    _getHtml(strings, svg) {\n        const l = strings.length;\n        const a = [];\n        let isTextBinding = false;\n        for (let i = 0; i < l - 1; i++) {\n            const s = strings[i];\n            a.push(s);\n            // We're in a text position if the previous string matches the\n            // textRegex. If it doesn't and the previous string has no tags, then\n            // we use the previous text position state.\n            isTextBinding = s.match(textRegex) !== null ||\n                (s.match(hasTagsRegex) !== null && isTextBinding);\n            a.push(isTextBinding ? textMarker : attributeMarker);\n        }\n        a.push(strings[l - 1]);\n        const html = a.join('');\n        return svg ? `<svg>${html}</svg>` : html;\n    }\n}\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (value != null && value.__litDirective === true) {\n        value = value(part);\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n    }\n    setValue(values, startIndex) {\n        const strings = this.strings;\n        let text = '';\n        for (let i = 0; i < strings.length; i++) {\n            text += strings[i];\n            if (i < strings.length - 1) {\n                const v = getValue(this, values[startIndex + i]);\n                if (v &&\n                    (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        // TODO: we need to recursively call getValue into iterables...\n                        text += t;\n                    }\n                }\n                else {\n                    text += v;\n                }\n            }\n        }\n        this.element.setAttribute(this.name, text);\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === null ||\n            !(typeof value === 'object' || typeof value === 'function')) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value === undefined ? '' : value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        let instance;\n        if (this._previousValue &&\n            this._previousValue.template === value.template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance =\n                new TemplateInstance(value.template, this.instance._partCallback);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n        this._previousValue = value;\n    }\n    clear(startNode = this.startNode) {\n        let node;\n        while ((node = startNode.nextSibling) !== this.endNode) {\n            node.parentNode.removeChild(node);\n        }\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback = defaultPartCallback) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        if (this.template.parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT */, null, false);\n            const parts = this.template.parts;\n            let index = 0;\n            let partIndex = 0;\n            let templatePart = parts[0];\n            let node = walker.nextNode();\n            while (node != null && partIndex < parts.length) {\n                if (index === templatePart.index) {\n                    this._parts.push(this._partCallback(this, templatePart, node));\n                    templatePart = parts[++partIndex];\n                }\n                else {\n                    index++;\n                    node = walker.nextNode();\n                }\n            }\n        }\n        if (this.template.svg) {\n            const svgElement = fragment.firstChild;\n            fragment.removeChild(svgElement);\n            const nodes = svgElement.childNodes;\n            for (let i = 0; i < nodes.length; i++) {\n                fragment.appendChild(nodes.item(i));\n            }\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=lit-html.js.map","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import {html, render} from 'lit-html';\r\nimport '../style/protvista-variation-filter.css';\r\n\r\nconst filters = [\r\n    {\r\n        name: 'disease',\r\n        label: 'Likely disease',\r\n        type: 'consequence',\r\n        color: ['#990000']\r\n    }, {\r\n        name: 'predicted',\r\n        type: 'consequence',\r\n        label: 'Predicted (deleterious/benign)',\r\n        color: ['#002594', '#8FE3FF']\r\n    }, {\r\n        name: 'nonDisease',\r\n        type: 'consequence',\r\n        label: 'Likely benign',\r\n        color: ['#99cc00']\r\n    }, {\r\n        name: 'uncertain',\r\n        type: 'consequence',\r\n        label: 'Uncertain',\r\n        color: '#FFCC00'\r\n    }, {\r\n        name: 'UniProt',\r\n        type: 'provenance',\r\n        label: 'UniProt reviewed'\r\n    }, {\r\n        name: 'ClinVar',\r\n        type: 'provenance',\r\n        label: 'ClinVar reviewed'\r\n    }, {\r\n        name: 'LSS',\r\n        type: 'provenance',\r\n        label: 'Large scale studies'\r\n    }\r\n];\r\n\r\nconst loadComponent = function () {\r\n    class ProtvistaVariationFilter extends HTMLElement {\r\n\r\n        constructor() {\r\n            super();\r\n            this._selectedFilters = [];\r\n        }\r\n\r\n        connectedCallback() {\r\n            this.renderFilters();\r\n        }\r\n\r\n        renderFilters() {\r\n            render(html `\r\n                <h5>Filter Consequence</h5>\r\n                <ul class=\"filter-list\">\r\n                    ${filters.filter(filter => filter.type === 'consequence').map(filter => html `\r\n                        <li><a id=\"${filter.name}-filter\" class=\"filter-select-trigger\"><span class=\"filter-select-wrapper\"><span class=\"filter-select\" style=\"background-color: ${filter.color[0]}\"></span></span>${filter.label}</a></li>\r\n                    `)}\r\n                </ul>\r\n                <h5>Filter Data Provenance</h5>\r\n                <ul class=\"filter-list\">\r\n                    ${filters.filter(filter => filter.type === 'provenance').map(filter => html `\r\n                        <li id=\"${filter.name}-filter\"><a id=\"${filter.name}-filter\" class=\"filter-select-trigger\"><span class=\"filter-select-wrapper\"><span class=\"filter-select\"></span></span>${filter.label}</a></li>\r\n                    `)}\r\n                </ul>\r\n            `, this);\r\n\r\n            filters.map(filter => this.querySelectorAll(`#${filter.name}-filter`)[0].addEventListener('click', e => this.toggleFilter(e.target, filter.name)));\r\n        }\r\n\r\n        toggleFilter(elt, filterName) {\r\n            if (this._selectedFilters.filter(filt => filt.name === filterName).length > 0) {\r\n                this._selectedFilters = this\r\n                    ._selectedFilters\r\n                    .filter(filt => filt.name !== filterName);\r\n                elt\r\n                    .classList\r\n                    .remove('active');\r\n            } else {\r\n                this\r\n                    ._selectedFilters\r\n                    .push(filters.filter(filt => filt.name === filterName)[0]);\r\n                elt\r\n                    .classList\r\n                    .add('active');\r\n            }\r\n            this.dispatchEvent(new CustomEvent(\"change\", {\r\n                detail: {\r\n                    variantfilters: this\r\n                        ._selectedFilters\r\n                        .map(d => d.name)\r\n                        .toString()\r\n                },\r\n                bubbles: true,\r\n                cancelable: true\r\n            }))\r\n        }\r\n\r\n    }\r\n    customElements.define('protvista-variation-filter', ProtvistaVariationFilter);\r\n};\r\n\r\n// Conditional loading of polyfill\r\nif (window.customElements) {\r\n    loadComponent();\r\n} else {\r\n    document\r\n        .addEventListener('WebComponentsReady', function () {\r\n            loadComponent();\r\n        });\r\n}\r\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","filters","name","label","color","loadComponent","ProtvistaVariationFilter","HTMLElement","constructor","_selectedFilters","connectedCallback","renderFilters","render","html","filter","map","querySelectorAll","addEventListener","e","toggleFilter","target","elt","filterName","filt","length","classList","remove","push","add","dispatchEvent","CustomEvent","detail","variantfilters","d","toString","bubbles","cancelable","customElements","define","window"],"mappings":"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"}