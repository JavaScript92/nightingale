{"version":3,"file":"protvista-variation-graph.js","sources":["../src/main.js"],"sourcesContent":["import ProtVistaTrack from 'protvista-track';\nimport {\n    scaleLinear,\n    scalePoint,\n    axisLeft,\n    axisRight,\n    select,\n    event as d3Event,\n    line,\n    extent,\n    max,\n    curveBasis\n} from 'd3';\n\nconst loadComponent = function() {\n    class ProtvistaVariationGraph extends ProtVistaTrack {\n\n        constructor() {\n            super();\n        }\n\n        connectedCallback() {\n            super.connectedCallback();\n\n            this._data = undefined;\n\n            this._height = parseInt(this.getAttribute('height')) || 40;\n            this._yScale = scaleLinear();\n            this._xExtent;\n            this._yExtent;\n\n            this._totals_line = line()\n                .x(d => this.xScale(d.x))\n                .y(d => this._yScale(d.y))\n                .curve(curveBasis);\n\n            this._totals_dataset = {};\n            this._totals_feature = undefined;\n\n            this._disease_line = line()\n                .x(d => this.xScale(d.x))\n                .y(d => this._yScale(d.y))\n                .curve(curveBasis);\n\n            this._disease_dataset = {};\n            this._disease_feature = undefined;\n        }\n\n        attributeChangedCallback(attrName, oldVal, newVal) {\n            super.attributeChangedCallback(attrName, oldVal, newVal);\n\n            if (!super.svg) {\n                return;\n            }\n        }\n\n        set data(data) {\n            this._data = data;\n\n            this._data\n                .forEach(m => {\n                    if (0 >= m.variants.length) {\n                        return;\n                    }\n\n                    m.variants\n                        .forEach(v => {\n                            if ('undefined' === typeof this._totals_dataset[v.begin]) {\n                                this._totals_dataset[v.begin] = 0;\n                            }\n\n                            if ('undefined' === typeof this._disease_dataset[v.begin]) {\n                                this._disease_dataset[v.begin] = 0;\n                            }\n\n                            this._totals_dataset[v.begin]++;\n\n                            if ('undefined' !== typeof v.association) {\n                                v.association\n                                    .forEach(a => {\n                                        if (true === a.disease) {\n                                            this._disease_dataset[v.begin]++;\n                                        }\n                                    })\n                            }\n                        });\n                });\n\n            this._totals_dataset = this._emptyFillMissingRecords(this._totals_dataset);\n            this._disease_dataset = this._emptyFillMissingRecords(this._disease_dataset);\n\n            this._createTrack();\n        }\n\n        _emptyFillMissingRecords(dataset) {\n            const sortedTotalsKeys = Object.keys(dataset)\n                .sort((a, b) => parseInt(a) - parseInt(b));\n\n            const totalsMin = sortedTotalsKeys[0];\n            const totalsMax = sortedTotalsKeys[sortedTotalsKeys.length - 1];\n\n            for (let i = totalsMin; i < totalsMax; i++) {\n                if ('undefined' === typeof dataset[i]) {\n                    dataset[i] = 0;\n                }\n            }\n\n            return Object.keys(dataset)\n                .sort((a, b) => parseInt(a) - parseInt(b))\n                .map(k => ({\n                    x: k,\n                    y: dataset[k]\n                }));\n        }\n\n        _createTrack() {\n            super.svg = select(this)\n                .append('svg')\n                .attr('width', this.width)\n                .attr('height', this._height)\n\n            // Create the visualisation here\n            this._createFeatures();\n            this.refresh();\n        }\n\n        _createFeatures() {\n            this._xExtent = extent(this._totals_dataset, d => parseInt(d.x));\n            this._yExtent = extent(this._totals_dataset, d => d.y);\n\n            // just a bit of padding on the top\n            this._yExtent[1] += 2;\n\n            this.xScale.domain(this._xExtent)\n                .range([0, this._width]);\n            this._yScale.domain(this._yExtent)\n                .range([this._height, 0]);\n        }\n\n        refresh() {\n            super.svg\n                .selectAll('path')\n                .remove();\n\n            this._disease_feature = super.svg\n                .append('path')\n                .data([this._disease_dataset])\n                .attr('fill', 'none')\n                .attr('stroke', 'red')\n                .attr('stroke-width', '1.5px')\n                .attr('stroke-dasharray', '0')\n                .attr('d', this._disease_line)\n                .attr('transform', 'translate(0,0)')\n\n            this._totals_feature = super.svg\n                .append('path')\n                .data([this._totals_dataset])\n                .attr('fill', 'none')\n                .attr('stroke', 'darkgrey')\n                .attr('stroke-width', '1px')\n                .attr('stroke-dasharray', '.5')\n                .attr('d', this._totals_line)\n                .attr('transform', 'translate(0,0)')\n        }\n    }\n    customElements.define('protvista-variation-graph', ProtvistaVariationGraph);\n};\n\n// Conditional loading of polyfill\nif (window.customElements) {\n    loadComponent();\n} else {\n    document.addEventListener('WebComponentsReady', function() {\n        loadComponent();\n    });\n}\n"],"names":["loadComponent","ProtvistaVariationGraph","_data","undefined","_height","parseInt","getAttribute","_yScale","scaleLinear","_xExtent","_yExtent","_totals_line","line","x","xScale","d","y","curve","curveBasis","_totals_dataset","_totals_feature","_disease_line","_disease_dataset","_disease_feature","attrName","oldVal","newVal","dataset","sortedTotalsKeys","Object","keys","sort","a","b","totalsMin","totalsMax","length","i","map","k","select","append","attr","width","_createFeatures","refresh","extent","domain","range","_width","selectAll","remove","babelHelpers.get","data","forEach","m","variants","v","begin","association","disease","_emptyFillMissingRecords","_createTrack","ProtVistaTrack","define","window","customElements","addEventListener"],"mappings":"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"}